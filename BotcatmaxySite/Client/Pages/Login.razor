@layout EmptyLayout
@page "/"
@inject NavigationManager navManager;
@inject HttpClient Http
@using BotcatmaxySite.Shared.Discord
@using BotcatmaxySite.Client
@using System.Web

<div class="loginCard centre" style="max-width: 100%; width: 400px;">
    <div class="header">
        <h4 style="margin-bottom: 0">
            Botcatmaxy
        </h4>
    </div>
    <div class="content">
        @if (buttonText != null)
        {
            @if (hasAccount == true)
            {
                <p>
                    Signed in as <b>@accountName</b>.
                </p>
            }
            else
            {
                <p>
                    Use your Discord account to log in.
                </p>
            }

            <div class="flex" style="margin-top: 0.8rem">
                <div class="spacer" />
                @if (hasAccount == true)
                {
                    <button @onclick="Switch" class="button secondary">
                        Switch Account
                    </button>
                }
                <button @onclick="OnClick" class="button brand">
                    @buttonText
                </button>
            </div>
        }
        else if (!errorHappened)
        {
            //Placeholder "wait" text
            <Spinner />
        }
    </div>
</div>

@*Should be bottom center*@
@if (errorHappened)
{
    <p>Something has gone wrong</p>
}

@code {
    private bool errorHappened = false;
    private string buttonText = null;
    private string buttonURL;
    private bool hasAccount;
    private string accountName = null;

    protected override async Task OnInitializedAsync()
    {

        try
        {
            //Makes discord response into query instead of anchor
            var URI = new Uri(navManager.Uri.Replace('#', '?'));
            string token = HttpUtility.ParseQueryString(URI.Query)["access_token"];

            if (token == null)
            {
                buttonText = $"Log in";
#if DEBUG
                buttonURL = "https://discord.com/api/oauth2/authorize?client_id=688839393968128034&redirect_uri=https%3A%2F%2Flocalhost%3A5001%2F&response_type=token&scope=identify%20guilds";
#else
                //placeholder pending new URL
                buttonURL = "google.com";
#endif
                return;
            }
            var user = await Http.GetFromJsonAsync<BaseUserInfo>($"UserInfo/{token}");
            if (user == null)
            {
                buttonText = "Error";
                return;
            }
            hasAccount = true;
            accountName = user.username;
            buttonText = $"Continue";
            buttonURL = @$"{navManager.BaseUri}loggedin/?token={token}";
        }
        catch (Exception e)
        {
            //Will log to browser console
            errorHappened = true;
            Console.WriteLine(e);
        }
    }

    private void OnClick()
    {
        navManager.NavigateTo(buttonURL);
    }

    private void Switch()
    {
        navManager.NavigateTo("https://discord.com/api/oauth2/authorize?client_id=688839393968128034&redirect_uri=https%3A%2F%2Flocalhost%3A5001%2F&response_type=token&scope=identify%20guilds&prompt=consent");
    }
}
